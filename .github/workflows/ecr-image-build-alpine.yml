---
name: AWS ECR Build Alpine Image
permissions:
  contents: read

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to build (e.g., v1.0.0 or branch name)'
        required: true
        type: string

jobs:
  build-alpine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup SSH Agent and add Github to known hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh-agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK >> /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts

      - name: Build and push Alpine image
        id: docker-build-alpine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/onadata-uwsgi/Dockerfile.alpine
          platforms: ${{ matrix.platform }}
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine
          cache-to: type=inline
          ssh: |
            default=/tmp/ssh-agent.sock
          build-args: |
            optional_packages=PyYAML django-redis ${{ secrets.ECR_OPTIONAL_PACKAGES }}
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine-${{ env.PLATFORM_PAIR }}
          labels: |
            org.opencontainers.image.title=Onadata Alpine
            org.opencontainers.image.version=${{ github.event.inputs.version }}

      - name: Image digest
        run: echo ${{ steps.docker-build-alpine.outputs.digest }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build-alpine
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create -t \
            ${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine \
            ${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine-linux-amd64 \
            ${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine-linux-arm64

      - name: Inspect manifest
        run: |
          docker buildx imagetools inspect \
            ${{ steps.login-ecr.outputs.registry }}/onaio/onadata:${{ github.event.inputs.version }}-alpine
