# Generated by Django 5.1.8 on 2025-08-27 11:30

from django.db import migrations

from onadata.apps.logger.xform_instance_parser import get_meta_from_xml


def populate_entityhistory_mutation_type(apps, schema_editor):
    EntityHistory = apps.get_model("logger", "EntityHistory")
    queryset = EntityHistory.objects.filter(instance__isnull=False)

    for entity_history in queryset.iterator(chunk_size=100):
        entity_node = get_meta_from_xml(entity_history.xml, "entity")
        mutation_success_checks = ["1", "true"]

        if entity_node:
            if entity_node.getAttribute("update") in mutation_success_checks:
                entity_history.mutation_type = EntityHistory.MutationType.UPDATE

            elif entity_node.getAttribute("create") in mutation_success_checks:
                entity_history.mutation_type = EntityHistory.MutationType.CREATE

            entity_history.save(update_fields=["mutation_type"])


def reverse_populate_entityhistory_mutation_type(apps, schema_editor):
    EntityHistory = apps.get_model("logger", "EntityHistory")
    # Reverse the migration by setting all mutation_type to the default value
    EntityHistory.objects.filter(instance__isnull=False).update(
        mutation_type=EntityHistory.MutationType.CREATE
    )


class Migration(migrations.Migration):
    dependencies = [
        ("logger", "0032_entityhistory_mutation_type"),
    ]

    operations = [
        migrations.RunPython(populate_entityhistory_mutation_type),
        migrations.RunPython(reverse_populate_entityhistory_mutation_type),
    ]
