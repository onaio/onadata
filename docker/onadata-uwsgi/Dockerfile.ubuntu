FROM python:3.10.14-bookworm as base

ARG release_version=v4.0.1
ARG optional_packages

# Silence configuration prompts
ENV DEBIAN_FRONTEND noninteractive

ENV PYTHONUNBUFFERED 1

ENV DJANGO_SETTINGS_MODULE onadata.settings.docker

# Install prerequisite packages
RUN apt-get update -q && \
    apt-get install -y --no-install-recommends \
    software-properties-common \
    binutils \
    build-essential \
    locales \
    netcat-traditional \
    gcc \
    pkg-config \
    git \
    openssh-client \
    libreadline-dev \
    libbz2-dev \
    libffi-dev \
    curl \
    automake

# Generate and set en_US.UTF-8 locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LC_CTYPE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
RUN dpkg-reconfigure locales


# Install OnaData Dependencies
RUN apt-get install -y --no-install-recommends \
    libproj-dev \
    gdal-bin \
    memcached \
    libmemcached-dev \
    libssl-dev \
    libpq-dev \
    gfortran \
    libatlas-base-dev \
    libjpeg-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    ghostscript \
    libtool \
    libpcre3 \
    libpcre3-dev \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Create OnaData user and add to tty group
RUN useradd -G tty -m onadata \
    && mkdir -p /srv/onadata \
    && chown -R onadata:onadata /srv/onadata

USER onadata

# Download public key for github.com
RUN mkdir ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

RUN curl https://pyenv.run | bash

ENV HOME /home/onadata
ENV PYENV_ROOT="$HOME/.pyenv"
ENV PATH $PYENV_ROOT/versions/3.10.14/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN pyenv install 3.10.14 && pyenv global 3.10.14 && pyenv rehash

# FROM base as requirements

COPY ../../ /srv/onadata/

# Install service requirements
WORKDIR /srv/onadata

USER root

# ENV GIT_SSH_COMMAND="ssh -vvv"
RUN mkdir -p /root/.ssh && ssh-keyscan github.com >> /root/.ssh/known_hosts
RUN echo $(ssh-add -l) && echo $SSH_AUTH_SOCK
RUN --mount=type=ssh echo $(ssh-add -l) && echo $SSH_AUTH_SOCK
# hadolint ignore=DL3013
RUN --mount=type=ssh if [ -n "$optional_packages" ]; then /home/onadata/.pyenv/versions/3.10.14/bin/pip install --no-cache-dir ${optional_packages} ; fi
RUN chown -R onadata:onadata /home/onadata/.pyenv/versions/3.10.14/lib/python3.10/site-packages

USER onadata

# hadolint ignore=DL3013
RUN python -m pip install --no-cache-dir -U pip && \
    python -m pip install --no-cache-dir -r requirements/base.pip && \
    python -m pip install --no-cache-dir -r requirements/s3.pip && \
    python -m pip install --no-cache-dir -r requirements/ses.pip && \
    python -m pip install --no-cache-dir -r requirements/azure.pip && \
    python -m pip install --no-cache-dir setuptools==69.2.0 && \
    python -m pip install --no-cache-dir pyyaml==6.0.1 uwsgitop==0.12 supervisor==4.2.5

FROM base as docs

ENV PYENV_ROOT="$HOME/.pyenv"
ENV PATH $PYENV_ROOT/versions/3.10.14/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
COPY --from=base /home/onadata/.pyenv/ /home/onadata/.pyenv/
COPY --from=base /srv/onadata/ /srv/onadata/

USER root

RUN chown -R onadata:onadata /srv/onadata/

USER onadata

# install sphinx and build API docs.
RUN python -m pip install --no-cache-dir -r requirements/docs.pip && \
    make -C docs html


FROM ubuntu:jammy-20240405 as runtime

ENV DEBIAN_FRONTEND noninteractive

# Install prerequisite packages
RUN apt-get update -q && \
    apt-get install -y --no-install-recommends locales netcat

# # Generate and set en_US.UTF-8 locale
RUN locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LC_CTYPE en_US.UTF-8
RUN dpkg-reconfigure locales


# # Install OnaData Dependencies
RUN apt-get install -y --no-install-recommends \
    gdal-bin \
    git-core \
    openjdk-11-jre-headless \
    libxml2-dev \
    libxslt1-dev \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Create OnaData user and add to tty group
RUN useradd -G tty -m onadata \
    && mkdir -p /srv/onadata \
    && chown -R onadata:onadata /srv/onadata

COPY --from=base /home/onadata/.pyenv/ /home/onadata/.pyenv/
COPY --from=docs /srv/onadata/ /srv/onadata/

RUN chown -R onadata:onadata /srv/onadata/

USER onadata
WORKDIR /srv/onadata

ENV HOME /home/onadata
ENV PYTHON_VERSION 3.10.14
ENV PYENV_ROOT="$HOME/.pyenv"
ENV PATH $PYENV_ROOT/versions/3.10.14/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

CMD ["uwsgi", "--ini", "uwsgi.ini"]
